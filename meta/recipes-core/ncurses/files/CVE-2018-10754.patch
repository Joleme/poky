From 53f167ec82819282a7c5ba906ef600e3a1b36558 Mon Sep 17 00:00:00 2001
From: Sunil Kumar <sukumar@mvista.com>
Date: Thu, 14 Feb 2019 12:35:58 +0530
Subject: [PATCH] ncurses: null-pointer check in _nc_parse_entry

Cherrry-picked part of ncurses upstream patch 20180414 for:
* add a null-pointer check in _nc_parse_entry to handle an error
  when a use-name is invalid syntax (report by Chung-Yi Lin).

Upstream-Status: Backport
CVE: CVE-2018-10754

Signed-off-by: Sunil Kumar <sukumar@mvista.com>
---
 NEWS                        | 4 ++++
 ncurses/tinfo/parse_entry.c | 8 +++++---
 2 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/NEWS b/NEWS
index fff49e18..1d32e558 100644
--- a/NEWS
+++ b/NEWS
@@ -45,6 +45,10 @@ See the AUTHORS file for the corresponding full names.
 Changes through 1.9.9e did not credit all contributions;
 it is not possible to add this information.
 
+20180414
+	+ add a null-pointer check in _nc_parse_entry to handle an error when
+	  a use-name is invalid syntax (report by Chung-Yi Lin).
+
 20171125
 	+ modify MKlib_gen.sh to avoid tracing result from getstr/getnstr
 	  before initialized.
diff --git a/ncurses/tinfo/parse_entry.c b/ncurses/tinfo/parse_entry.c
index bbbfcb27..0389767b 100644
--- a/ncurses/tinfo/parse_entry.c
+++ b/ncurses/tinfo/parse_entry.c
@@ -1,5 +1,5 @@
 /****************************************************************************
- * Copyright (c) 1998-2016,2017 Free Software Foundation, Inc.              *
+ * Copyright (c) 1998-2017,2018 Free Software Foundation, Inc.              *
  *                                                                          *
  * Permission is hereby granted, free of charge, to any person obtaining a  *
  * copy of this software and associated documentation files (the            *
@@ -543,9 +543,11 @@ _nc_parse_entry(ENTRY * entryp, int literal, bool silent)
 		 * Otherwise, look for a base entry that will already
 		 * have picked up defaults via translation.
 		 */
-		for (i = 0; i < entryp->nuses; i++)
-		    if (!strchr((char *) entryp->uses[i].name, '+'))
+		for (i = 0; i < entryp->nuses; i++) {
+		    if (entryp->uses[i].name != 0
+			&& !strchr(entryp->uses[i].name, '+'))
 			has_base_entry = TRUE;
+		}
 	    }
 
 	    postprocess_termcap(&entryp->tterm, has_base_entry);
-- 
2.11.1

