From 3649d491773d06a5b8fc6ae1d62f452c15380f91 Mon Sep 17 00:00:00 2001
From: drh <drh@noemail.net>
Date: Mon, 25 May 2020 15:19:52 +0000
Subject: [PATCH 3/8] Defensive code that tries to prevent a recurrence of
 problems like the one described in ticket [7a5279a25c57adf1]

Upstream Status: Backport https://www.sqlite.org/src/info/572105de1d44bca4
CVE: CVE-2020-13435 patch #2

FossilOrigin-Name: 572105de1d44bca4f18c99d373458889163611384eebbc9659474874ee1701f4
Signed-off-by: Anand Je Sypureddy <anandje@mvista.com>
---
 sqlite3.c | 10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

diff --git a/sqlite3.c b/sqlite3.c
index 08e11bb..6f44cc6 100644
--- a/sqlite3.c
+++ b/sqlite3.c
@@ -102499,7 +102499,10 @@ expr_code_doover:
   switch( op ){
     case TK_AGG_COLUMN: {
       AggInfo *pAggInfo = pExpr->pAggInfo;
-      struct AggInfo_col *pCol = &pAggInfo->aCol[pExpr->iAgg];
+      struct AggInfo_col *pCol;
+      assert( pAggInfo!=0 );
+      assert( pExpr->iAgg>=0 && pExpr->iAgg<pAggInfo->nColumn );
+      pCol = &pAggInfo->aCol[pExpr->iAgg];
       if( !pAggInfo->directMode ){
         assert( pCol->iMem>0 );
         return pCol->iMem;
@@ -102793,7 +102796,10 @@ expr_code_doover:
     }
     case TK_AGG_FUNCTION: {
       AggInfo *pInfo = pExpr->pAggInfo;
-      if( pInfo==0 ){
+      if( pInfo==0
+       || NEVER(pExpr->iAgg<0)
+       || NEVER(pExpr->iAgg>=pInfo->nFunc)
+      ){
         assert( !ExprHasProperty(pExpr, EP_IntValue) );
         sqlite3ErrorMsg(pParse, "misuse of aggregate: %s()", pExpr->u.zToken);
       }else{
-- 
2.27.0

